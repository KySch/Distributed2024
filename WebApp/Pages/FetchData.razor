@page "/fetchdata"
@inject HttpClient Http
@inject ApiAuthenticationStateProvider ApiAuthenticationStateProvider

<PageTitle>Notifications</PageTitle>

<h1>Notifications</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (notifications == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>User Id</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var notificaiton in notifications)
            {
                <tr>
                    <td>@notificaiton.Id</td>
                    <td>@notificaiton.UserId</td>
                    <td>@notificaiton.description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Notifications[]? notifications;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await ApiAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        var userIdClaim = user.FindFirst(c => c.Type == "userId")?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            try
            {
                var requestData = new Notifications
                {
                    Id = userIdClaim
                };

                var jsonContent = JsonContent.Create(requestData);
                var response = await Http.PostAsync("http://localhost:5003/gateway/Notifications/getnotifications", jsonContent);

                notifications = await response.Content.ReadFromJsonAsync<Notifications[]>();

            }
            catch (Exception ex)
            {
                notifications = null; // Handle the case where the request fails
            }
        }
    }

    public class Notifications
    {
        public string? Id { get; set; }
        public string? UserId { get; set; }
        public string? description { get; set; }

    }
}
